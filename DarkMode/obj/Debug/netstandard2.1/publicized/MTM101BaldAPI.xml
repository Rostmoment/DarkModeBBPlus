<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MTM101BaldAPI</name>
    </assembly>
    <members>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.TexturesFromFolder(System.String,System.String)">
            <summary>
            Load textures from a specified folder.
            </summary>
            <param name="path"></param>
            <param name="search"></param>
            <returns>The array of textures created using the images found.</returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.TexturesFromMod(BepInEx.BaseUnityPlugin,System.String,System.String[])">
            <summary>
            Gets textures from a specified folder, starting from the mod's StreamingAssets path.
            </summary>
            <param name="plugin"></param>
            <param name="search"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.ToSprites(UnityEngine.Texture2D[],System.Single)">
            <summary>
            Convert an array of texture into sprites
            </summary>
            <param name="textures"></param>
            <param name="pixelsPerUnit"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.TextureFromFile(System.String)">
            <summary>
            Load a texture from a file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.TextureFromFile(System.String,UnityEngine.TextureFormat)">
            <summary>
            Load a texture from a file with the specified format.
            </summary>
            <param name="path"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.ReplaceTexture(UnityEngine.Texture2D,UnityEngine.Texture2D)">
            <summary>
            Replace the image data of one texture with another.
            They must be the exact same size.
            </summary>
            <param name="toReplace">The texture to override the texture of.</param>
            <param name="replacement">The replacement texture.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.ReplaceTexture(System.String,UnityEngine.Texture2D)">
            <summary>
            Find a texture with the specified name and replace it's image data with the data of replacement.
            </summary>
            <param name="toReplace"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.AttemptConvertTo(UnityEngine.Texture2D,UnityEngine.TextureFormat)">
            <summary>
            Attempt to convert a texture to another format, deleting the original.
            </summary>
            <param name="toConvert"></param>
            <param name="format"></param>
            <returns>The texture converted to the new format.</returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.ReplaceAllTexturesFromFolder(System.String)">
            <summary>
            Go through a folder and replace the image data of all textures sharing the same name of the png file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.AudioClipFromFile(System.String)">
            <summary>
            Load an audio clip from a file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.AudioClipFromFile(System.String,UnityEngine.AudioType)">
            <summary>
            Load an audio clip from a file with the specified AudioType.
            </summary>
            <param name="path"></param>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.SpriteFromTexture2D(UnityEngine.Texture2D,System.Single)">
            <summary>
            Create a sprite from a Texture2D with the origin of the image being the center.
            </summary>
            <param name="tex">The texture to use.</param>
            <param name="pixelsPerUnit">The pixels per unit, a hallway in BB+ is 10 units.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.ToByteArray(System.IO.Stream)">
            <summary>
            Convert a stream to a byte array.
            </summary>
            <param name="stream"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.SpriteFromTexture2D(UnityEngine.Texture2D,UnityEngine.Vector2,System.Single)">
            <summary>
            Create a sprite from a Texture2D.
            </summary>
            <param name="tex">The texture to use.</param>
            <param name="center">The center of the sprite, where 0,0 is the top left and 1,1 is the bottom right.</param>
            <param name="pixelsPerUnit">The pixels per unit, a hallway in BB+ is 10 units.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.SpriteFromFile(System.String,UnityEngine.Vector2,System.Single)">
            <summary>
            Creates a sprite from the specified file path.
            </summary>
            <param name="filePath">The path to load the texture from.</param>
            <param name="center">The center of the sprite, where 0,0 is the top left and 1,1 is the bottom right.</param>
            <param name="pixelsPerUnit">The pixels per unit, a hallway in BB+ is 10 units.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.SpriteFromMod(BepInEx.BaseUnityPlugin,UnityEngine.Vector2,System.Single,System.String[])">
            <summary>
            Load a Sprite from the specified path, starting from the specified mod's mod path.
            </summary>
            <param name="plug">The mod to load the sprite from</param>
            <param name="paths">The additional paths to load</param>
            <param name="pixelsPerUnit">The pixels per unit, a hallway in BB+ is 10 units.</param>
            <param name="center">The center of the sprite, where 0,0 is the top left and 1,1 is the bottom right.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.LoadLanguageFolder(System.String)">
            <summary>
            Load a Language folder from a non-standard place.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.TextureFromMod(BepInEx.BaseUnityPlugin,System.String[])">
            <summary>
            Load a Texture2D from the specified path, starting from the specified mod's mod path.
            </summary>
            <param name="plug"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.AudioClipFromMod(BepInEx.BaseUnityPlugin,System.String[])">
            <summary>
            Load an Audioclip from the specified path, starting from the specified mod's mod path.
            </summary>
            <param name="plug"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.GetModPath(BepInEx.BaseUnityPlugin)">
            <summary>
            Get a mod's mod path. (Currently StreamingAssets/Modded/[MOD GUID])
            </summary>
            <param name="plug"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.MidiFromFile(System.String,System.String)">
            <summary>
            Loads a midi file with the specified path.
            </summary>
            <param name="path">The filepath of the midi.</param>
            <param name="id">The ID of the midi, used as a starting point for creating the return value.</param>
            <returns>The string that can be used in the midi player to play the midi.</returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.MidiFromMod(System.String,BepInEx.BaseUnityPlugin,System.String[])">
            <summary>
            Loads a midi file with the specified path starting from the mod path.
            </summary>
            <param name="id">The ID of the midi, used as a starting point for creating the return value.</param>
            <param name="plug">The modpath to get.</param>
            <param name="paths">The folders to go through starting from the modpath.</param>
            <returns>The string that can be used in the midi player to play the midi.</returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.CubemapFromMod(BepInEx.BaseUnityPlugin,System.String[])">
            <summary>
            Creates a cubemap from a texture in the specified path, starting from the mod path.
            </summary>
            <param name="plugin"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.CubemapFromFile(System.String)">
            <summary>
            Creates a cubemap from a texture in the specified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetLoader.CubemapFromTexture(UnityEngine.Texture2D)">
            <summary>
            Create a cubemap from a Texture2D.
            </summary>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="T:MTM101BaldAPI.AssetTools.AssetManager">
            <summary>
            This class provides an (optional) easy and convient way to store mass amounts of asset references.
            This is useful for storing textures, SoundObjects, NPC references, and more.
            This class is not meant to be the end all be all of storing and managing assets.
            However, this is a good starting point for most mods.
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.GetUniqueCount">
            <summary>
            Get the amount of unique elements in the AssetManager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.#ctor(System.Type[])">
            <summary>
            Create an AssetManager with a custom set of types to be ignored. It is suggested you also add the types in AssetManager.defaultIgnoreTypes
            </summary>
            <param name="ignoreTypes"></param>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.#ctor">
            <summary>
            Create an AssetManager with the default types ignored.
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.ClearAll``1">
            <summary>
            Remove all objects of type T from the AssetManager.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.AddRange``1(``0[],System.Func{``0,System.String})">
            <summary>
            Add a range of elements to the AssetManager, using the keyFunc to determine the keys.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range"></param>
            <param name="keyFunc"></param>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.AddFromResources``1">
            <summary>
            Add all resources of the specified type to the AssetManager, using the name as the key.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.ContainsKey(System.String)">
            <summary>
            Check if the asset manager contains the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.AddRange``1(``0[])">
            <summary>
            Add a range of values to the AssetManager, using the .name of the object as the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range"></param>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.AddRange``1(System.Collections.Generic.List{``0})">
            <summary>
            Add a range of values to the AssetManager, using the .name of the object as the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range"></param>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.AddRange``1(System.Collections.Generic.Dictionary{``0,System.String},System.String)">
            <summary>
            Add a range of values to the AssetManager using a dictionary of object key pairs, with an optional prefix.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.AddRange``1(``0[],System.String[])">
            <summary>
            Add a range of values to the AssetManager using an object array and a key array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range"></param>
            <param name="keys"></param>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.AssetManager.AddRange``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            Add a range of values to the AssetManager using a dictionary of object key pairs.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range"></param>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.SpriteSheets.SpriteSheetLoader.LoadAsepriteAnimationsFromFile(System.String,System.Single,UnityEngine.Vector2)">
            <summary>
            Loads an Aesprite JSON file from the specified file path.
            </summary>
            <param name="path"></param>
            <param name="pixelsPerUnit"></param>
            <param name="pivot"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.AssetTools.SpriteSheets.SpriteSheetLoader.LoadAsepriteAnimationsFromMod(BepInEx.BaseUnityPlugin,System.Single,UnityEngine.Vector2,System.String[])">
            <summary>
            Loads an Aesprite JSON file from the specified mod path.
            </summary>
            <param name="plugin"></param>
            <param name="pixelsPerUnit"></param>
            <param name="pivot"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.HarmonyExtensions.PatchAllConditionals(HarmonyLib.Harmony,System.Reflection.Assembly,System.Boolean)">
            <summary>
            Patches all conditional patches with the specified assembly
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.HarmonyExtensions.PatchAllConditionals(HarmonyLib.Harmony)">
            <summary>
            Patches all conditional patches in the current assembly. A direct replacement for PatchAll.
            </summary>
            <param name="_harmony"></param>
        </member>
        <member name="T:MTM101BaldAPI.ConditionalPatch">
            <summary>
            Base class for ConditionalPatches.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.ConditionalPatchAlways">
            <summary>
            Always patches, same as not having a ConditionalPatch at all.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.ConditionalPatchConfig">
            <summary>
            Patches if the specified config is true.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.ConditionalPatchNever">
            <summary>
            Never patches.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.ConditionalPatchMod">
            <summary>
            Patch if the specified mod is installed.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.ConditionalPatchNoMod">
            <summary>
            Patch if the specified mod is not installed.
            </summary>
        </member>
        <member name="P:MTM101BaldAPI.MTM101BaldiDevAPI.Version">
            <summary>
            The version of the API, applicable when BepInEx cache messes up the version number.
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.MTM101BaldiDevAPI.CauseCrash(BepInEx.PluginInfo,System.Exception)">
            <summary>
            Please only use this function for actual errors.
            </summary>
            <param name="plug"></param>
            <param name="e"></param>
        </member>
        <member name="T:MTM101BaldAPI.Components.CullAffector">
            <summary>
            GameObjects with this behavior makes the culling manager treat it as if it were a player. Useful if you have are using cameras that aren't the players'.
            Note that performance may take a hit if you use this, so use it with caution! (Maybe if the player isn't looking you could remove the component?)
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.Components.CustomAnimation`1.#ctor(System.Int32,`0[])">
            <summary>
            Create an animation with the specified FPS
            </summary>
            <param name="fps"></param>
            <param name="frames"></param>
        </member>
        <member name="M:MTM101BaldAPI.Components.CustomAnimation`1.#ctor(`0[],System.Single)">
            <summary>
            Create an animation that is totalTime long.
            </summary>
            <param name="frames"></param>
            <param name="totalTime"></param>
        </member>
        <member name="T:MTM101BaldAPI.Components.CustomAnimatorMono`3">
            <summary>
            A base for a monobehavior implementation of ICustomAnimator, including setting a default animation
            </summary>
            <typeparam name="TType"></typeparam>
            <typeparam name="TAnimation"></typeparam>
            <typeparam name="TFrame"></typeparam>
        </member>
        <member name="M:MTM101BaldAPI.Components.CustomAnimatorMono`3.PopulateAnimations(System.Collections.Generic.Dictionary{System.String,`2[]},System.Int32)">
            <summary>
            Populate the animations dictionary with a dictionary of keys and frame arrays with the specified FPS.
            </summary>
            <param name="animations"></param>
            <param name="fps"></param>
        </member>
        <member name="T:MTM101BaldAPI.Components.CustomSpriteAnimator">
            <summary>
            A custom animator for sprites.
            Note that the animations do not serialize, so initialize them in the entities Initialize function.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.Components.CustomImageAnimator">
            <summary>
            A custom animator for images.
            Note that the animations do not serialize, so initialize them in the entities Initialize function.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.Components.RotatedSpriteAnimator">
            <summary>
            A custom animator for entities with rotating sprites.
            EX: First-Prize and Dr. Reflex
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.CustomLevelObject">
            <summary>
            A custom version of the LevelObject class, currently doesn't contain much else but it serves as a good base to make extending level generator functionality easy in the future.
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.EnumExtensions.ToStringExtended``1(``0)">
            <summary>
            ToString but for Extended enums. Only use on enums that are ints.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.EnumExtensions.ExtendEnum``1(System.String)">
            <summary>
            Extends an enum, same effect could be achieved by casting an int, however this has a system to keep track of multiple enum additions from different mods to prevent conflicts
            </summary>
            <typeparam name="T"></typeparam>
            <param name="extendName"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.EnumExtensions.GetExtendedName``1(System.Int32)">
            <summary>
            Enum.GetName but with support for extended enums.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.EnumExtensions.GetFromExtendedName``1(System.String)">
            <summary>
            Get an extended enum from a name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.ConvertToPrefab(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Convert the GameObject into a prefab by moving its transform inside an internal GameObject marked as HideAndDontSave. It is automatically done for NPCs made with NPCBuilders and Items made with ItemBuilder.
            Use this method in AssetsLoaded.
            </summary>
            <param name="me"></param>
            <param name="setActive">If true, then the GameObject will be set to active. The components code won't run anyways.</param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.StopCurrentTransition(GlobalCam)">
            <summary>
            Stops the currently running transition.
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.MoveUntilDone(System.Collections.IEnumerator)">
            <summary>
            Repeatedly calls MoveNext until the IEnumerator is empty
            </summary>
            <param name="numerator"></param>
            <returns>All the things returned by the IEnumerator</returns>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.MarkAsNeverUnload(UnityEngine.Object)">
            <summary>
            Makes an object never unload from memory.
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.RemoveUnloadMark(UnityEngine.Object)">
            <summary>
            Allows an object unload from memory.
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.MarkAsNeverUnload(UnityEngine.ScriptableObject)">
            <summary>
            Makes an object never unload from memory.
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.RemoveUnloadMark(UnityEngine.ScriptableObject)">
            <summary>
            Allows an object unload from memory.
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.GetCellIndexAt(RoomAsset,System.Int32,System.Int32)">
            <summary>
            Get the index of the cell at the specified position, returns -1 if there is no cell with that position.
            </summary>
            <param name="me"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The index in the cells array of the cell with the specific position, -1 if there is no cell in that position.</returns>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.GetCellAt(RoomAsset,System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified position, returns null if there is no cell at that position.
            </summary>
            <param name="me"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The cell at the specified position or null if it does not exist.</returns>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.SetMainTexture(UnityEngine.Material,UnityEngine.Texture)">
            <summary>
            Sets the main texture of the material, uses the appropiate variable names for BB+ shaders.
            </summary>
            <param name="me"></param>
            <param name="texture"></param>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.SetMaskTexture(UnityEngine.Material,UnityEngine.Texture)">
            <summary>
            Sets the mask texture of the material.
            </summary>
            <param name="me"></param>
            <param name="texture"></param>
        </member>
        <member name="M:MTM101BaldAPI.Extensions.ApplyDoorMaterials(StandardDoor,StandardDoorMats,UnityEngine.Material)">
            <summary>
            Applies the StandardDoorMats materials to the specified StandardDoor, optionally changing the mask.
            </summary>
            <param name="me"></param>
            <param name="materials"></param>
            <param name="mask"></param>
        </member>
        <member name="M:MTM101BaldAPI.Registers.MetaExtensions.ToValues``1(System.Collections.Generic.List{MTM101BaldAPI.Registers.IMetadata{``0}})">
            <summary>
            Converts metadata into a list of the metadata's values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.Registers.MetaExtensions.ToValues``1(MTM101BaldAPI.Registers.IMetadata{``0}[])">
            <summary>
            Converts metadata into an array of the metadata's values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="F:MTM101BaldAPI.Registers.GenerationModType.Base">
            <summary>
            This should be used for methods that override the majority of the generator properties, almost completely transforming the level.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.GenerationModType.Override">
            <summary>
            This should be used for overriding only certain properties of the generator, such as changing exit counts.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.GenerationModType.Addend">
            <summary>
            This should be used for adding onto already existing properties, such as adding characters or items. Most mods will be using this.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.GenerationModType.Finalizer">
            <summary>
            Useful for removing things that might've been added or changed by other mods, or if for one reason or another you need the final say on something. 
            <c>Use with caution.</c>
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.Registers.GeneratorManagement.Register(BepInEx.BaseUnityPlugin,MTM101BaldAPI.Registers.GenerationModType,System.Action{System.String,System.Int32,MTM101BaldAPI.CustomLevelObject})">
            <summary>
            Register a generator action, called during mod loading.
            </summary>
            <param name="plug">The plugin adding the generator modifiers.</param>
            <param name="type"></param>
            <param name="action">The first parameter is the level name, the second one is the level id, and the last is the CustomLevelObject itself.</param>
        </member>
        <member name="M:MTM101BaldAPI.Registers.GeneratorManagement.Invoke(System.String,System.Int32,MTM101BaldAPI.CustomLevelObject)">
            <summary>
            Invoke the generator actions for the specified CustomLevelObject.
            </summary>
            <param name="name"></param>
            <param name="floorNumber"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MTM101BaldAPI.Registers.LoadingEvents.RegisterOnAssetsLoaded(BepInEx.PluginInfo,System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Registers a loading IEnumerator that gets called when every asset has been loaded into memory and can be sorted through with Resources.FindObjectsOfTypeAll.
            The first yield return should be the amount of total amount of yield returns in the function as an int.
            The second yield return should be the initial loading text.
            Every yield afterwards should be a string that displays the next loading step.
            </summary>
            <param name="info"></param>
            <param name="enumerator"></param>
            <param name="post">If true, this will be called after the initial call, this is useful if you need to replace all references to something.</param>
        </member>
        <member name="M:MTM101BaldAPI.Registers.LoadingEvents.RegisterOnAssetsLoaded(BepInEx.PluginInfo,System.Action,System.Boolean)">
            <summary>
            Registers an action that gets called when every asset has been loaded into memory and can be sorted through with Resources.FindObjectsOfTypeAll.
            Internally, it just creates an IEnumerator that calls toRegister.
            </summary>
            <param name="info"></param>
            <param name="toRegister"></param>
            <param name="post">If true, this will be called after the initial call, this is useful if you need to replace all references to something.</param>
        </member>
        <member name="M:MTM101BaldAPI.Registers.LoadingEvents.RegisterOnLoadingScreenStart(BepInEx.PluginInfo,System.Collections.IEnumerator)">
            <summary>
            Registers an event that gets called at the beginning of the Loading screen, before any assets are loaded.
            Typically, you'd want to just use your plugins Awake event, but if your mod tends to freeze the game at start up, this might be helpful to more properly convey what is going on.
            </summary>
            <param name="info"></param>
            <param name="enumerator"></param>
        </member>
        <member name="F:MTM101BaldAPI.Registers.ItemFlags.None">
            <summary>
            This item has no necessary flags.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.ItemFlags.MultipleUse">
            <summary>
            // This item has multiple uses like the grappling hook.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.ItemFlags.NoInventory">
            <summary>
            This item should not appear in the players inventory and is used instantly upon pickup.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.ItemFlags.InstantUse">
            <summary>
            This item should not appear in the players inventory and is used instantly upon pickup.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.ItemFlags.NoUses">
            <summary>
            This item doesn't do anything when used, regardless of circumstance. This is for items like the Apple, but not the quarter as it can be used in machines.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.ItemFlags.Persists">
            <summary>
            This item's behavior doesn't instantly destroy itself when used. This is applicable for the BSODA or the Big Ol' Boots.
            </summary>
        </member>
        <member name="F:MTM101BaldAPI.Registers.ItemFlags.CreatesEntity">
            <summary>
            This item creates a physical entity in the world, this is applicable for the BSODA but not the Big Ol' Boots.
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.Registers.ItemMetaStorage.GetPointsObject(System.Int32,System.Boolean)">
            <summary>
            Get the metadata for the points item with the specified(or closest) value.
            </summary>
            <param name="points">The amount of points to try to search for</param>
            <param name="mustBeExact">If true, the point count must be exact, otherwise it will return null</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.Registers.NPCMetaStorage.ReplaceAllReferencesForCharacter``2(Character)">
            <summary>
            Replaces all references to a specific NPC with a script attached of the same type. Useful if you replace an NPC with a custom type.
            </summary>
            <typeparam name="TOld"></typeparam>
            <typeparam name="TReplace"></typeparam>
            <param name="character"></param>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.EntityBuilder.SetBaseRadius(System.Single)">
            <summary>
            Set's the base collision radius of the entity.
            </summary>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.EntityBuilder.AddRenderbaseFunction(System.Func{Entity,UnityEngine.Transform})">
            <summary>
            Adds a function that will be called to set/create the rendererBase for the entity.
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.EntityBuilder.AddDefaultRenderBaseFunction(UnityEngine.Sprite)">
            <summary>
            Sets the function to create the renderbase to create a standard sprite RenderBase with the specified sprite.
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.EntityBuilder.AddTrigger(System.Single)">
            <summary>
            Adds a trigger with the specified radius to the entity.
            </summary>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.EntityBuilder.SetName(System.String)">
            <summary>
            Sets the name of the entity's GameObject.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.EntityBuilder.SetLayer(System.String)">
            <summary>
            Sets the layer of the entity.
            </summary>
            <param name="layer">The name of the layer.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.EntityBuilder.SetLayerCollisionMask(UnityEngine.LayerMask)">
            <summary>
            Sets the layer collision mask of the entity.
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.Build">
            <summary>
            Builds the ItemObject and creates the Item prefab if none is specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetMeta(MTM101BaldAPI.Registers.ItemFlags,System.String[])">
            <summary>
            Sets the metadata of the item.
            </summary>
            <param name="flags"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetMeta(MTM101BaldAPI.Registers.ItemMetaData)">
            <summary>
            Sets the metadata of the item to an already existing metadata which this object will be appened to.
            </summary>
            <param name="existingMeta"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetItemComponent``1">
            <summary>
            Sets the type of the item component to add to the created Item prefab.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetItemComponent``1(``0)">
            <summary>
            Sets the item component to an already existing gameObject.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetNameAndDescription(System.String,System.String)">
            <summary>
            Sets the name of the item and its description in the shop.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetAsInstantUse">
            <summary>
            Makes the item be used instantly when collected through a pickup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetSprites(UnityEngine.Sprite,UnityEngine.Sprite)">
            <summary>
            Sets the big and large sprites respectively.
            </summary>
            <param name="small">The small sprite, usually with a pixelsPerUnit of 25.</param>
            <param name="large">The large sprite, usually with a pixelsPerUnit of 50.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetEnum(Items)">
            <summary>
            Set the Items enum to use for the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetEnum(System.String)">
            <summary>
            Creates an Items enum using EnumExtensions with the specified name.
            </summary>
            <param name="enumToRegister"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetShopPrice(System.Int32)">
            <summary>
            Sets the item's price in the shop.
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.ItemBuilder.SetGeneratorCost(System.Int32)">
            <summary>
            Sets the cost of the item for the generator.
            Each level has a budget it can spend on items.
            </summary>
            <param name="cost"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.Build">
            <summary>
            Builds the NPC.
            </summary>
            <returns>The created NPC prefab.</returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.DisableNavigationPrecision">
            <summary>
            Makes the NPC target the tile instead of the exact cordinate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.DisableAutoRotation">
            <summary>
            Disables the NPC from automatically rotating in the direction it is moving.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetMaxSightDistance(System.Single)">
            <summary>
            Sets the max distance the NPC can see, one tile is 10 units.
            </summary>
            <param name="maxDistance"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetFOV(System.Single)">
            <summary>
            Assigns a field of view to the NPC, as default NPCs can see all around them.
            </summary>
            <param name="fov">The FOV to give the NPC</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetName(System.String)">
            <summary>
            Sets the name of the NPC Object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetMetaName(System.String)">
            <summary>
            Sets the localization key that will be set in the NPC's meta. This is usually the same key for the name section of the character poster.
            </summary>
            <param name="name">The key to set</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetEnum(Character)">
            <summary>
            Sets the enum of the NPC to an already existing enum.
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetEnum(System.String)">
            <summary>
            Sets the enum of the NPC to an automatically created one with the same name.
            </summary>
            <param name="enumName"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetPoster(PosterObject)">
            <summary>
            Sets the NPC's poster to the specified poster object.
            </summary>
            <param name="poster"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.AddMetaFlag(MTM101BaldAPI.Registers.NPCFlags)">
            <summary>
            Adds a flag to the metadata
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.EnableAcceleration">
            <summary>
            Changes the NPC's navigator to use acceleration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetStationary">
            <summary>
            Makes the NPC unable to move.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetMetaTags(System.String[])">
            <summary>
            Sets the tags for the NPC.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.RemoveSprite">
            <summary>
            Remove the NPC's visuals completely. Only use this if you plan on having your character be entirely invisible all the time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetPoster(UnityEngine.Texture2D,System.String,System.String)">
            <summary>
            Sets the NPC poster to an automatically generated one.
            </summary>
            <param name="texture">The texture to use for the automatically generated poster.</param>
            <param name="posterTitle">The NPC's name to show on the poster.</param>
            <param name="posterDescription">The NPC's description to show on the poster.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.AddLooker">
            <summary>
            Adds a looker, allowing the NPC to see the player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.AddTrigger">
            <summary>
            Adds a trigger, allowing the NPC to collide with entities and the player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.IgnorePlayerOnSpawn">
            <summary>
            Makes the NPC spawn instantly, regardless of distance from the player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.IgnoreBelts">
            <summary>
            Makes the NPC ignore conveyor belts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetAirborne">
            <summary>
            Makes the NPC count as airborne.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.AddHeatmap">
            <summary>
            Makes the NPC have the ability to use the heatmap for navigation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.AddSpawnableRoomCategories(RoomCategory[])">
            <summary>
            Add multiple room categories as potential spawn locations for the NPC.
            </summary>
            <param name="categories"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.SetMinMaxAudioDistance(System.Single,System.Single)">
            <summary>
            Set the Min/Max Audio distance for the NPC's sounds. One tile is 10 units.
            </summary>
            <param name="min">Minimum distance for the audio manager.</param>
            <param name="max">Maximum distance for the audio manager.</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.AddPotentialRoomAsset(RoomAsset,System.Int32)">
            <summary>
            Add a room asset that the NPC will spawn into the level, like Gotta Sweep's closet or Dr. Reflex's office.
            </summary>
            <param name="asset"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.NPCBuilder`1.AddPotentialRoomAssets(WeightedRoomAsset[])">
            <summary>
            Add multiple room assets that the NPC will spawn one of into the level, like Gotta Sweep's closet or Dr. Reflex's office.
            </summary>
            <param name="assets"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.Build">
            <summary>
            Builds the random event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.AddRequiredCharacter(Character)">
            <summary>
            Adds a character requirement to this event.
            NOTE THAT THIS DOES NOTHING ON ITS OWN! THIS ONLY ADDS TO THE METADATA!
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.SetMeta(MTM101BaldAPI.Registers.RandomEventFlags,System.String[])">
            <summary>
            Set the metadata of the random event.
            </summary>
            <param name="flags"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.SetSound(SoundObject)">
            <summary>
            Sets the sound that Baldi will "say" when the event is triggered.
            </summary>
            <param name="sound"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.AddRoomAsset(RoomAsset,System.Int32)">
            <summary>
            Add a room asset that will be generated if this event is chosen.
            </summary>
            <param name="asset"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.AddRoomAssets(WeightedRoomAsset[])">
            <summary>
            Add multiple room assets that will have one chosen at random if this event is chosen.
            </summary>
            <param name="assets"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.SetName(System.String)">
            <summary>
            Set the name of the random event GameObject.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.SetMinMaxTime(System.Single,System.Single)">
            <summary>
            Set the minimum and maximum time this event can last for.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.SetEnum(RandomEventType)">
            <summary>
            Set the RandomEventType enum that this event will use.
            </summary>
            <param name="typ"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreation.RandomEventBuilder`1.SetEnum(System.String)">
            <summary>
            Create a RandomEventType enum using EnumExtensions with the specified name.
            </summary>
            <param name="enumToRegister"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreators.CreateMapTileShader(UnityEngine.Texture2D)">
            <summary>
            Creates a material with the appropiate shader and texture for use on the minimap.
            </summary>
            <param name="tex"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.ObjectCreators.CreateCharacterPoster(UnityEngine.Texture2D,System.String,System.String)">
            <summary>
            Create a PosterObject in the style of a typical character poster.
            </summary>
            <param name="texture"></param>
            <param name="nameKey">The localization key that will show up as the character's name.</param>
            <param name="descKey">The localization key that will show up as the character's description.</param>
            <returns></returns>
        </member>
        <member name="E:MTM101BaldAPI.OptionsAPI.CustomOptionsCore.OnMenuInitialize">
            <summary>
            This gets called when the Option's Menu gets created. This function may be called multiple times.
            </summary>
        </member>
        <member name="E:MTM101BaldAPI.OptionsAPI.CustomOptionsCore.OnMenuClose">
            <summary>
            This gets called whenever the options menu gets closed, so you can save your stuff.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.PlusExtensions.PlayerMovementStatModifier">
            <summary>
            A stat modifier for the PlayerMovement's variables.
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.Reflection.ReflectionHelpers.ReflectionSetVariable(System.Object,System.String,System.Object)">
            <summary>
            Use sparingly, as these are not cached, and will waste memory if called constantly.
            </summary>
            <param name="me"></param>
            <param name="name"></param>
            <param name="setTo"></param>
        </member>
        <member name="M:MTM101BaldAPI.Reflection.ReflectionHelpers.ReflectionGetVariable(System.Object,System.String)">
            <summary>
            Use sparingly, as these are not cached, and will waste memory if called constantly.
            </summary>
            <param name="me"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.Reflection.ReflectionHelpers.ReflectionInvoke(System.Object,System.String,System.Object[])">
            <summary>
            Use sparingly, as these are not cached, and will waste memory if called constantly.
            </summary>
            <param name="me"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:MTM101BaldAPI.SaveSystem.ModdedItemIdentifier">
            <summary>
            Stores the mod GUID and name of the ItemObject to allow it to be referenced later.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.SaveSystem.ModdedSaveGame">
            <summary>
            The root class for modded save games, storing the base game data, but restructured in a way that is more mod friendly.
            </summary>
        </member>
        <member name="M:MTM101BaldAPI.SaveSystem.ModdedSaveSystem.AddSaveLoadAction(BepInEx.BaseUnityPlugin,System.Action{System.Boolean,System.String})">
            <summary>
            Allows you to add an action to be called when the game saves and loads, please only use this system if you plan to save data.
            The first value passed to the action is whether or not its saving (true if saving, false if loading)
            The second is the path allocated to your mod to save your modded save data
            </summary>
            <param name="p"></param>
            <param name="act"></param>
        </member>
        <member name="M:MTM101BaldAPI.ScriptableObjectHelpers.CloneScriptableObject``2(``0)">
            <summary>
            Creates a ScriptableObject of type CloneType and copies the values of OriginalType to CloneType.
            <c>This clones by reference!</c>
            </summary>
            <typeparam name="OriginalType"></typeparam>
            <typeparam name="CloneType"></typeparam>
            <param name="original"></param>
            <returns>The clone with all public properties from the original copied over.</returns>
        </member>
        <member name="M:MTM101BaldAPI.UI.UIExtensions.ConvertToButton``1(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Converts a UI element to a button by adding the necessary components and initializing the correct variables and adding the "Button" tag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="autoAssign">Should the StandardMenuButtons image and text fields be automatically assigned using GetComponent?</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.UI.UIHelpers.CreateImage(UnityEngine.Sprite,UnityEngine.Transform,UnityEngine.Vector3,System.Boolean,System.Single)">
            <summary>
            Creates an image based off of the sprite, handling its RectTransform.
            </summary>
            <param name="spr"></param>
            <param name="parent"></param>
            <param name="position"></param>
            <param name="correctPosition">If the position should be corrected based off of the top left of a 4:3 screen. This is primarily for custom field trips and UI.</param>
            <param name="scale">The scale of the image</param>
            <returns></returns>
        </member>
        <member name="M:MTM101BaldAPI.UI.UIHelpers.CreateImage(UnityEngine.Sprite,UnityEngine.Transform,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Creates an image based off of the sprite, handling its RectTransform.
            </summary>
            <param name="spr"></param>
            <param name="parent"></param>
            <param name="position"></param>
            <param name="correctPosition">If the position should be corrected based off of the top left of a 4:3 screen. This is primarily for custom field trips and UI.</param>
            <returns></returns>
        </member>
        <member name="T:MTM101BaldAPI.WaitForSecondsNPCTimescale">
            <summary>
            Wait for the defined amount of time depending on the NPCTimeScale of the environement controller. The NPC Timescale can be affected by The Test for instance.
            </summary>
        </member>
        <member name="T:MTM101BaldAPI.WaitForSecondsEnviromentTimescale">
            <summary>
            Wait for the defined amount of time depending on the EnviromentTimescale of the environement controller.
            </summary>
        </member>
    </members>
</doc>
